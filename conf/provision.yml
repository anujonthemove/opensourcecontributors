---
- name: provision server
  hosts: all
  user: root
  roles:
    - role: kamaln7.swapfile
      swapfile_use_dd: True
      swapfile_size: 2048
  tasks:
    - name: update installed packages
      apt: upgrade=dist update_cache=yes cache_valid_time=3600

    - name: create ghc user
      user: name=ghc generate_ssh_key=yes shell=/bin/bash

    - name: install server base packages
      apt: name={{ item }} state=latest update_cache=yes cache_valid_time=3600
      with_items:
        - apt-file
        - apticron
        - build-essential
        - cowsay
        - curl
        - dnsutils
        - emacs24
        - git
        - htop
        - iftop
        - iotop
        - jq
        - letsencrypt
        - mailutils
        - mc
        - moreutils # for chronic
        - ncdu
        - ncurses-term
        - ntp
        - pcregrep
        - python-dev
        - python-pip
        - python-virtualenv
        - python3-dev
        - python3-pip
        - rsync
        - silversearcher-ag
        - ssmtp
        - tig
        - tmux
        - toilet
        - virtualenvwrapper
        - wget
        - zsh

    - name: set tmp permissions
      file: path=/tmp mode=a+w

    - name: enable agent forwarding
      lineinfile: dest=/etc/ssh/sshd_config
                  state=present
                  regexp='^AllowAgentForwarding'
                  line='AllowAgentForwarding yes'
      notify: restart sshd

    - name: configure ssh keys for root
      authorized_key: user=root key=https://github.com/hut8.keys

    - name: configure ssh keys for ghc
      authorized_key: user=ghc key=https://github.com/hut8.keys

  handlers:
    - name: restart sshd
      service: name=ssh state=restarted

- name: install go
  hosts: all
  user: root
  tasks:
    - name: set go version
      set_fact: go_version="1.6.2.linux-amd64"

    - name: download go binary distribution
      get_url: dest=/tmp
               url="https://storage.googleapis.com/golang/go{{go_version}}.tar.gz"

    - name: extract tarball
      unarchive: src="/tmp/go{{go_version}}.tar.gz"
                 dest=/usr/local/
                 copy=no

- name: install and configure mongodb
  user: root
  hosts: database
  tasks:
    - apt_key: keyserver=keyserver.ubuntu.com id=EA312927

    - name: add mongodb repo (debian wheezy has better package for systemd)
      apt_repository: repo='deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.2 main'
                      state=present

    - name: install mongodb
      apt: name=mongodb-org state=latest update_cache=yes

    - name: configure data directory
      file: path=/srv/db
            state=directory
            owner=mongodb
            group=daemon

    - name: install config file
      copy: src=mongod.conf
            dest=/etc/mongod.conf
      notify: restart mongodb

  handlers:
    - name: restart mongodb
      service: name=mongod state=restarted

- name: install and configure nginx and frontend utilities
  user: root
  hosts: web
  tags:
    - deploy
  tasks:
    - name: install nginx
      apt: name=nginx-extras state=latest update_cache=yes

    - name: uninstall default site config
      file: path=/etc/nginx/sites-enabled/default
            state=absent

    - name: install nginx config files
      template:
        src: "{{ item }}"
        dest: "/etc/nginx/sites-enabled/"
      notify: restart nginx
      with_items:
        - github-contributions.nginx.conf
        - opensourcecontributo.rs.nginx.conf

    - name: install node repo
      shell: curl -sL https://deb.nodesource.com/setup_5.x | bash -

    - name: install node + npm
      apt: name=nodejs state=latest update_cache=yes

    - name: install gulp-cli
      command: npm install -g gulp-cli
      # DO NOT USE -- THIS DOESN'T INSTALL IT ?!
      # npm: name=gulp-cli global=yes state=latest

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted


- name: make common directory structures
  user: root
  hosts: github-contributions
  tags:
    - deploy
  tasks:
    - name: archive directories
      file: path={{ item }} state=directory owner=ghc group=ghc
      with_items:
        - /srv/github-contributions
        - /srv
        - /srv/bin
        - /home/ghc/go
        - /home/ghc/go/src
        - /var/log/ghc

- name: make archive directory structures
  user: root
  hosts: database
  tasks:
    - name: archive directories
      file: path={{ item }} state=directory owner=ghc group=ghc
      with_items:
        - /srv/github-archive
        - /srv/github-archive/events
        - /srv/github-archive/loaded
        - /srv/github-archive/logs
        - /srv/github-archive/timeline
        - /srv/github-archive/transformed


- name: install ghc server configuration
  user: root
  hosts: web
  tags:
    - deploy
  tasks:
    - include_vars: secrets.yml

    - name: write environment variables
      template: src=ghc-env.sh
                dest=/etc/ghc-env.sh

    - name: install ghc app systemd script
      template: src=github-contributions-app.service
                dest=/etc/systemd/system/github-contributions-app.service
      notify: enable systemd service

  handlers:
    - name: enable systemd service
      shell: systemctl daemon-reload && systemctl enable github-contributions-app.service

- name: configure ssmtp
  user: root
  hosts: github-contributions
  tasks:
    - include_vars: secrets.yml

    - name: copy revaliases
      template: src=ssmtp-revaliases dest=/etc/ssmtp/revaliases

    - name: copy ssmtp.conf
      template: src=ssmtp.conf dest=/etc/ssmtp/ssmtp.conf mode=0644

- name: build and deploy app and archive-processor
  user: ghc
  hosts: github-contributions
  tags:
    - deploy
  vars:
    git_branch: master
  tasks:
    - name: pull ghc repository
      git: repo=ssh://git@github.com/tenex/github-contributions.git
           dest=/srv/github-contributions
           accept_hostkey=yes
           version="{{ git_branch }}"
      register: git_status

    - debug: msg="deploying ghc at {{ git_status.after }}"

    - name: install python dependencies
      pip: requirements=/srv/github-contributions/requirements.txt
           virtualenv=/srv/venv-{{ git_status.after }}
           virtualenv_command="virtualenv --python=/usr/bin/python3"

    - name: commit python venv
      file: path=/srv/venv
            src=/srv/venv-{{ git_status.after }}
            state=link

    - name: commit archive-processor
      file: path=/srv/app
            src=/srv/github-contributions/app
            state=link

    - name: gopath trick for ghc-app
      file: path=/home/ghc/go/src/ghc-app
            src=/srv/github-contributions/ghc-app
            state=link

    - name: build ghc-app
      script: build-ghc-app.sh

    - name: install dependencies
      shell: npm install
      args:
        chdir: /srv/github-contributions/web

    - name: build assets
      shell: gulp
      args:
        chdir: /srv/github-contributions/web

- name: set service states
  user: root
  hosts: web
  tags:
    - deploy
  tasks:
    - name: ensure server is running
      service: name=github-contributions-app state=restarted

- name: install cron job
  user: root
  hosts: database
  tags:
    - deploy
  tasks:
    - name: github archive processor cron job
      cron: job="chronic /srv/github-contributions/conf/process-job"
            name=archive-processor
            minute=5
            user=ghc

- name: install monitor cron job
  user: root
  hosts: database
  tags:
    - deploy
  tasks:
    - name: github archive archive processor monitor cron job
      cron: job=/srv/github-contributions/conf/server-monitor
            name=server-monitor
            minute=55
            user=ghc

- name: certificate cron job
  user: root
  hosts: web
  tasks:
    - name: lets-encrypt certificate renewal cron job
      cron:
        job: letsencrypt renew
        special_time: daily
        name: renew-certificate

- name: tell rollbar we deployed
  user: ghc
  hosts: web
  tasks:
    - name: figure out who i am
      local_action: command whoami
      register: local_user

    - name: rollbar notification
      run_once: true
      rollbar_deployment: environment=production
                          revision={{ git_status.after }}
                          token={{ rollbar_token }}
                          user={{ local_user.stdout }}
