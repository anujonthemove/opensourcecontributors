#!/usr/bin/env python3
# -*-python-*-
"""Utility to automatically download needed .json.gz files from githubarchive.org
"""
from datetime import datetime, timedelta
import os
import argparse
import requests
from requests.exceptions import HTTPError
import sys

START = datetime(2015, 1, 1, 0)
TIME_FMT = '%Y-%m-%d-%-H'
BUFFER_SIZE = 1024 * 1024

def gha_url(filename):
   return "http://data.githubarchive.org/{}".format(filename)

def retrieve(filename, sink_path):
   url = gha_url(filename)
   if os.path.isfile(sink_path):
      raise RuntimeError('will not overwrite file already present')

   source = requests.get(url, stream=True)
   try:
      source.raise_for_status()
   except HTTPError as e:
      print("\nerror: {} ({})".format(url, e),
            end='')
      return 0
   sz = 0
   with open(sink_path, 'wb') as sink:
      for chunk in source.iter_content(BUFFER_SIZE):
         sz += len(chunk)
         sink.write(chunk)
   last_modified = source.headers['Last-Modified']
   last_modified = datetime.strptime(last_modified,
                                     '%a, %d %b %Y %H:%M:%S %Z')
   last_modified = last_modified.timestamp()
   os.utime(sink_path, (last_modified, last_modified))
   return sz

def main(args):
   t = START
   while t <= datetime.utcnow():
      filename = "{}.json.gz".format(t.strftime(TIME_FMT))
      local_filename = os.path.join(args.path, filename)
      print(local_filename, end='')
      if not os.path.isfile(local_filename):
         print(' downloading...', end='')
         sz = retrieve(filename, local_filename)
         if sz: print(' {} B'.format(sz), end='')
      t += timedelta(hours=1)
      print()


if __name__=='__main__':
   parser = argparse.ArgumentParser(description='Maintain copy of GitHub Archive')
   parser.add_argument('--path', required=True)
   args = parser.parse_args()

   main(args)
